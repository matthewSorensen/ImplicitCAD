{-- 
This script generates Graphics/Implicit/Export/Additive/Elements.hs 
We're doing it this way for orthogonality with blaze-html and blaze-svg -
this file and Elements.hs will eventually be refactored out into a blaze-amf
package. 
--}

import Data.List (intercalate)

buildVertex n = unlines [
                 n ++ " :: Show a => a -> Markup",
                 concat [
                  n, " a = Parent \"", n, "\" \"<", n, "\" \"</", n, ">\" $ Content $ PreEscaped $ String $ show a"
                 ],
                 concat ["{-# INLINE ", n, " #-}"]
                ]

buildNormal n = unlines [
                 n ++ " :: Markup -> Markup",
                 concat [n, " = Parent \"",n, "\" \"<", n, "\" \"</", n, ">\""],
                 concat ["{-# INLINE ", n, " #-}"]
                ]

vertices = ["x","y","z","nx","ny","nz","v1","v2","v3"]
normal = ["vertex","coordinates","normal","amf","object","mesh","volume","triangle","vertices"]

header exports = unlines ["{-# LANGUAGE OverloadedStrings #-}"
                 ,"{-- WARNING! This file is automatically generated!"
                 ,"Do not edit this file - instead, run util/build-amf-elements.hs"
                 ,"--}"
                 ,"module Graphics.Implicit.Export.Additive.Elements ("
                 ,intercalate ", " exports
                 ,") where"
                 ,"import Text.Blaze.Internal"]

main = do
  putStrLn $ header $ "Markup (..)" : normal ++ vertices
  putStrLn $ unlines $ map buildVertex vertices
  putStrLn $ unlines $ map buildNormal normal



